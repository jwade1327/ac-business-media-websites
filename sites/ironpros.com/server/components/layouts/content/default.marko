import { getAsArray, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import contentIframe from "@ac-business-media/package-global/utils/content-iframe";

$ const { site, apollo, contentMeterState, GAM } = out.global;
$ const { id, type, pageNode, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ const displayOverlay = (contentMeterState) ? defaultValue(contentMeterState.displayOverlay, false) : false;
<!-- $ const adInjectionContentTypes = ["article", "blog", "media-gallery", "news", "product"]; -->
$ const withAdInjection = false; //(displayOverlay) ? false : defaultValue(input.withAdInjection, adInjectionContentTypes.includes(type));
$ const withAds = false; // (displayOverlay || !GAM) ? false : defaultValue(input.withAds, true);
$ const withComments = (displayOverlay) ? false : defaultValue(input.withComments, false);
$ const withCompany = defaultValue(input.withCompany, ["press-release", "product"].includes(type));
$ const withLoadMore = (displayOverlay) ? false : defaultValue(input.withLoadMore, true);
$ const withNewsletterSignup = (displayOverlay) ? false : defaultValue(input.withNewsletterSignup, true);
$ const withPrimaryImage = defaultValue(input.withPrimaryImage, ["media-gallery"].includes(type) ? false : true);
$ const withPublishedDate = defaultValue(input.withPublishedDate, ["company", "whitepaper"].includes(type) ? false : true);
$ const withRecommended = (displayOverlay) ? false : defaultValue(input.withRecommended, true);
$ const withRelatedStories = (displayOverlay) ? false : defaultValue(input.withRelatedStories, true);
$ const withSocialShare = (displayOverlay) ? false : defaultValue(input.withSocialShare, ["contact"].includes(type) ? false : true);
$ const dateFormat = defaultValue(input.dateFormat, "MMMM D, YYYY");

$ const displayInquiry = (content) => {
  const isCompanyTitanium = getAsArray(content, "company.labels").includes("Titanium");
  if (site.get("inquiry.enabled") === false) return false;
  // @todo vet this, but for now if titanium always enable this else look it up off of the company
  if (isCompanyTitanium) return true;
  return get(content, "company.enableRmi") || false;
}

<site-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  with-ads=withAds
  load-more=withLoadMore
  ...rest
>
  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <!-- <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content /> -->
      <if(type !== "contact")>
        <if(authors.length === 1)>
          <theme-author-published-node author=authors[0] content=content lazyload=false display-updated-date=false format=dateFormat />
        </if>
        <else-if(authors.length > 1)>
          <theme-content-attribution obj=content elements=["authors"] />
        </else-if>
      </if>
      <if(type === "news")>
        <theme-content-attribution obj=content elements=["byline"] />
      </if>
      <if(type === "event" || type === "webinar")>
        <theme-page-dates|{ blockName }|>
          <marko-web-content-starts tag="span" block-name=blockName obj=content />
          <if(content.starts !== content.ends)>
            <marko-web-content-ends tag="span" block-name=blockName obj=content />
          </if>
        </theme-page-dates>
      </if>
      <else-if(withPublishedDate && authors.length !== 1)>
        <theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content display-updated-date=false format=dateFormat />
        </theme-page-dates>
      </else-if>

      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
      <if(content.magazineSchedules.length && site.get("magazine"))>
        <a href="/subscribe" class="btn btn-primary mt-3 magazine-subscribe">Subscribe to Magazine</a>
      </if>
    </div>
  </@section>

  <@section|{ aliases, content, authors, resolved }| modifiers=["content-body"]>
    $ const labels = getAsArray(content, "labels");
    $ const isSponsored = labels.includes("Sponsored");
    $ const { primarySection } = content;
    <div class="row">
      <div class="col-lg-12">
        <global-content-contact-details obj=content />
        <div class="content-page-body">
          <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(content.embedCode)>
              $ const iframeContent = contentIframe(content);
              <marko-web-content-embed-code block-name=blockName obj=iframeContent />
            </if>
            <else-if(type === "product" && resolved.getEdgeNodesFor("images").length > 1)>
              <marko-web-image-slider images=resolved.getEdgeNodesFor("images") image-options={ fit: "fill", fillColor: "#ffffff", ar: "16:9"} />
            </else-if>
            <else-if(withPrimaryImage)>
              $ let forceDisplay;
              $ if (type === "contact") forceDisplay = "left";
              $ if (type === "video") forceDisplay = "none";
              <theme-primary-image-block
                obj=content.primaryImage
                force-display=forceDisplay
              />
            </else-if>

            <if(content.transcript)>
              <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                <marko-web-icon name="file" modifiers=["lg"] /> Transcript
              </marko-web-link>
            </if>

            $ const requiresRegistration = get(content, "userRegistration.isCurrentlyRequired");
            <marko-web-identity-x-access|context| enabled=requiresRegistration>
              <if(!context.canAccess || context.requiresUserInput)>
              <!-- <if(false)> -->
                $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  profile-confirmation=false
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                  content-gate-type="default"
                />
              </if>
              <else>
                $ const bodyId = `content-body-${content.id}`;
                $ const lazyloadFirstImage = withPrimaryImage && content.primaryImage;
                <theme-body-with-injection
                  content=content
                  aliases=aliases
                  block-name=blockName
                  selector=bodyId
                  preventHTMLInjection=(!withAdInjection && !isSponsored)
                  mobile-leaderboard-ad-name="top-rotation-mobile"
                  lazyload-first-image=lazyloadFirstImage
                />
                <if(content.transcript)>
                  $ const transcriptId = `content-transcript-${content.id}`;
                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <theme-body-with-injection
                      content={ body: content.transcript }
                      aliases=aliases
                      block-name=blockName
                      selector=transcriptId
                      preventHTMLInjection=(!withAdInjection && !isSponsored)
                    />
                  </div>
                </if>

                <if(displayInquiry(content))>
                  <div class="mb-block">
                    <theme-company-inquiry-form-block modifiers=["flush-x"] content=content consent-checkboxes=getAsArray(site, 'config.inquiry.consentCheckboxes') />
                  </div>
                </if>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                $ const sidebars = getAsArray(content, "sidebars").map((sidebar) => sidebar.body);
                <marko-web-content-sidebars block-name=blockName obj={ sidebars } />

                <if(type === "webinar")>
                  $ const isUpcoming = new Date(content.startDate) > Date.now();
                  $ const btnLabel = (isUpcoming) ? "Register for Webinar" : "View Webinar";
                  <marko-web-link
                    class="my-block mb-block btn btn-primary btn-lg"
                    href=content.linkUrl
                    title=btnLabel
                    target="_blank"
                  >
                    ${btnLabel}
                  </marko-web-link>
                </if>

                <if(type === "document" || type === "whitepaper")>
                  <theme-content-download obj=content>
                    <@wufoo user-name=site.get("wufoo.userName") />
                    <@link class="btn btn-primary" />
                  </theme-content-download>
                </if>
                <if(type !== "contact")>
                  <for|author| of=authors>
                    <if(getAsArray(author, "labels").includes("Contributor"))>
                      <marko-web-content-body obj=author block-name="inline-author-bio" />
                    </if>
                  </for>
                </if>
                <if(content.company)>
                  <div class="page-attribution">
                    $ const { company } = content;
                    <div class="page-attribution__content-company-name">
                      <if(company.primaryImage && company.primaryImage.src)>
                        <marko-web-content-name tag="span" block-name="page-attribution" obj=company link=true>
                          <global-company-logo content=company />
                        </marko-web-content-name>
                      </if>
                      <else>
                        <marko-web-content-name tag="span" block-name="page-attribution" obj=company link=true />
                      </else>
                    </div>
                  </div>
                </if>
                <if(withSocialShare)>
                  <marko-web-social-sharing
                    path=content.siteContext.path
                    providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                    print-path=`/print/content/${content.id}`
                  />
                </if>
              </else>
            </marko-web-identity-x-access>

            <if(content.magazineSchedules.length && site.get("magazine"))>
              <a href="/subscribe" class="btn btn-primary mt-3 magazine-subscribe">Subscribe to Magazine</a>
            </if>

            <marko-web-identity-x-context|{ hasUser }|>
              <if(!hasUser && withNewsletterSignup && !requiresRegistration)>
                <global-identity-x-newsletter-form-inline type="inlineContent" with-image=false />
              </if>
            </marko-web-identity-x-context>
            <if(withComments)>
              <theme-identity-x-comment-stream content=content />
            </if>
          </theme-page-contents>
        </div>
      </div>

    </div>
  </@section>

  <if(withRelatedStories)>
    <@section|{ content }| modifiers=["break-container"]>
      <theme-related-stories-block
        content-id=content.id
        section-id=content.primarySection.id
        published=content.published
        with-native-x=true
        native-x={ sectionName: 'Sponsored' }
      />
    </@section>
  </if>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</site-content-wrapper-layout>
